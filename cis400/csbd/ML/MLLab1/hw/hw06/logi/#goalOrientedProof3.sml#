(* -------------------------------------------------------------------------- *)
(* Goal-Oriented Proofs                                                       *)
(* Section 9.2.2: Tacticals                                                   *)
(* Author: Shiu-Kai Chin                                                      *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* In this example, we introduce functions THENL and THEN that compose        *)
(* tactics into larger compound tactics.  These functions are called          *)
(* tacticals. Tacticals allow us to execute one compound tactic to do an      *)
(* entire proof in one big step.  Without tacticals, we would have repeat     *)
(* each step by itself, which is tedious and time consuming.                  *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* The proof of [A,B] |- A /\ B in the previous module is mapped out below.   *)
(* CONJ_TAC split the goal [A,B] ?- A /\ B into two subgoals. Each subgoal    *)
(* was proved using the theorem tactic ACCEPT_TAC applied to theorems         *)
(* [A] |- A and [B] |- B.                                                     *)
(*                                                                            *)
(* Proof Tree                                                                 *)
(*                            [A,B] ?- A /\ B                                 *)
(*  ====================================================== CONJ_TAC           *)
(*    [A,B] ?- A                         [A,B] ?- B                           *)
(*   ============ ACCEPT_TAC [A] |- A   ============ ACCEPT_TAC [B] |- B      *)
(*                                                                            *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* What the proof tree shows is that what we'd like to do is (1) apply the    *)
(* tactic CONJ_TAC to [A,B] ?- A /\ B, then apply ACCEPT_TAC [A] |- A to      *)
(* [A,B] ?- A and ACCEPT_TAC [B] |- B. Using the tactical THENL, which takes  *)
(* a list of tactics corresponding to each subgoal, we can specify after      *)
(* CONJ_TAC, the tactics that are applied the 2 subgoals generated by CONJ_TAC*)
(* We do this with the compound tactic                                        *)
(*   CONJ_TAC THENL                                                           *)
(*   [(ACCEPT_TAC (ASSUME``A:bool`)), (ACCEPT_TAC (ASSUME``B:bool`))]         *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Let's try out the above compound tactic.  First, set the goal. Second,     *)
(* do the proof using the compound tactic above.                              *)
(* -------------------------------------------------------------------------- *)
set_goal([``A:bool``,``B:bool``],``A /\ B``);
CONJ_TAC THENL 
 [(ACCEPT_TAC (ASSUME``A:bool``)), (ACCEPT_TAC (ASSUME``B:bool``))]


(* -------------------------------------------------------------------------- *)
(* Many times, we want to apply the same tactic to all the subgoals generated *)
(* by a tactic.  In this case, the tactical we use is THEN.  To illustrate    *)
(* this, let's look at another theorem list tactic, ASM_REWRITE_TAC.          *)
(* ASM_REWRITE_TAC rewrite the goal using (a) built-in rewrites, e.g.,        *)
(* x \/ T = T, (b) a list of theorems supplied to which ASM_REWRITE_TAC is    *)
(* applied, and (c) the assumptions in the goal.                              *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* After CONJ_TAC is applied, we note that both the subgoals have [A,B] as    *)
(* their assumption list.  This is equivalent to have [A=T,B=T] as            *)
(* assumptions.  Both subgoals [A,B] ?- A and [A,B] ?- B are proved using     *)
(* assumptions A and B, respectively. We can use ASM_REWRITE_TAC [] on both.  *)
(* -------------------------------------------------------------------------- *)
CONJ_TAC

(* -------------------------------------------------------------------------- *)
(* Let's move back one step. We do this by doing HOL ->  Goalstack -> Back up *)
(* or M-h b.  Notice that we get back our initial goal.  We do CONJ_TAC then  *)
(* on the first subgoal we do ASM_REWRITE_TAC[].                              *)
(* -------------------------------------------------------------------------- *)
ASM_REWRITE_TAC[]


(* -------------------------------------------------------------------------- *)
(* We see that the first goal is proved. Now, let's apply the same  tactic    *)
(* ASM_REWRITE_TAC[] on the remaining subgoal.                                *)
(* -------------------------------------------------------------------------- *)
ASM_REWRITE_TAC[]


(* -------------------------------------------------------------------------- *)
(* We see that the same tactic applied to both subgoal works. In the case     *)
(* where we apply the same tactic to all subgoals, the tactical we use is     *)
(* THEN                                                                       *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Let's restart our proof by going back to the initial subgoal.  This is     *)
(* in the proof manager by doing HOL -> Goalstack -> Restore, or M-h B.       *)
(* Doing so, we see we have restored the initial goal. Remember, to move      *)
(* back one step, we do M-h b, or HOL -> Goalstack -> Back up.                *)
(* -------------------------------------------------------------------------- *)


(* -------------------------------------------------------------------------- *)
(* Let's apply the compound tactic using ASM_REWRITE_TAC[]. Highlight the     *)
(* compound tactic, and do M-h e.                                             *)
(* -------------------------------------------------------------------------- *)
CONJ_TAC THEN
ASM_REWRITE_TAC []

(* -------------------------------------------------------------------------- *)
(* We see that the proof is done in one step with the compound tactic.        *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Finally, some of you may note that since our initial goal is               *)
(* [A,B] ?- A /\ B, we could apply ASM_REWRITE_TAC[] first, instead of after  *)
(* CONJ_TAC.  Let's see what happens. We restore the initial goal by doing    *)
(* M-h B.                                                                     *)
(* -------------------------------------------------------------------------- *)
ASM_REWRITE_TAC []


(* -------------------------------------------------------------------------- *)
(* OK, let's take a break. Thanks for your attention.                         *)
(* -------------------------------------------------------------------------- *)
