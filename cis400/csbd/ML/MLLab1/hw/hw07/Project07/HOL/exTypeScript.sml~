(* Xiaozhi Li *)
(* csbd project 07 *)

structure exTypeScript = struct
open HolKernel Parse boolLib bossLib;
open listTheory TypeBase arithmeticTheory

val _ = new_theory "exType";



val APP_def =
Define
`(APP [] (l: 'a list) = l) /\
 (APP (h :: (l1 : 'a list)) (l2: 'a list) = h:: (APP l1 l2))`

val APP_ASSOC =
TAC_PROOF(
([],
``!(l1: 'a list)(l2 :'a list)(l3 :'a list).
    (APP(APP l1 l2) l3) = (APP l1 (APP l2 l3))``),
Induct_on `l1` THEN
ASM_REWRITE_TAC[APP_def])

val _ = save_thm("APPXXASSOC", APP_ASSOC)


val LENGTH_def=
Define
`(LENGTH [] =0) /\
 (LENGTH (w:: (l: 'a list))= 1 +(LENGTH l))`






val LENGTH_APP_def=
Define
`(LENGTH_APP [] [] = 0)/\
(LENGTH_APP (l1: 'a list) (l2: 'a list) = LENGTH (APP l1 l2)) `

(* ===start =======
set_goal([],
``!(l1: 'a list)(l2 :'a list)(l3 :'a list).
    (APP(APP l1 l2) l3) = (APP l1 (APP l2 l3))``);


set_goal ([],
``!(l1: 'a list)(l2: 'a list).
   (LENGTH (APP l1 l2)) =(LENGTH l1 + LENGTH l2)``);

Induct_on `l1`
Induct_on `l2`
ASM_REWRITE_TAC [LENGTH_APP_def]

ASM_REWRITE_TAC [ADD_CLAUSES]
REWRITE_TAC[ADD_CLAUSES]

PROVE_TAC[ADD_CLAUSES]

set_goal([],`` !a b. a+b=b+a``)
ASM_REWRITE_TAC [ADD_CLAUSES]
RES_TAC


PAT_ASSUM
===end======= *)

val _= export_theory ();
val _= print_theory "-";

end (* structure *)